---

- name: Create a network for bitwarden
  community.docker.docker_network:
    name: "{{ bw_network_name }}"
    driver: bridge

- name: Create DB folders
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    state: directory
    mode: "{{ item.mode }}"
  loop:
    - { dest: "{{ pg4bw_data }}", mode: '0700' }
    - { dest: "{{ pg4bw_init_user_db_dir }}", mode: '0755' }

# This task will copy script to create DB vaultwarden during container initialization.
# More info - https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts
- name: Copy init_user_db script to {{ pg4bw_init_user_db_dir }}
  ansible.builtin.template:
    src: create_vaultwarden_db.sh.j2
    dest: "{{ pg4bw_init_user_db_dir }}/create_vaultwarden_db.sh"
    mode: 0755

- name: Create vaultwarden data folder
  ansible.builtin.file:
    dest: "{{ bw_data }}"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: Start vaultwarden and postgres docker containers
  community.docker.docker_compose:
    state: present
    project_name: bitwarden
    definition:
      version: '3'
      services:
        bitwarden-db:
          image: "{{ pg4bw_image }}"
          restart: always
          volumes:
            - "{{ pg4bw_data }}:/var/lib/postgresql/data"
            - "{{ pg4bw_init_user_db_dir }}:/docker-entrypoint-initdb.d"
          environment:
            PGUSER: "{{ pg4bw_vaultwarden_user }}"
            POSTGRES_PASSWORD: "{{ pg4bw_vaultwarden_password }}"
            POSTGRES_DB: vaultwarden
            POSTGRES_USER: "{{ pg4bw_vaultwarden_user }}"
            POSTGRES_PASSWORD: "{{ pg4bw_vaultwarden_password }}"
            ARCHIVE_MODE: on
            ARCHIVE_TIMEOUT: 3600
            AWS_ACCESS_KEY_ID: "{{ pg4bw_aws_key }}"
            AWS_REGION: "{{ pg4bw_aws_region }}"
            AWS_SECRET_ACCESS_KEY: "{{ pg4bw_aws_secret }}"
            WALG_S3_PREFIX: "{{ pg4bw_s3_bucket }}"
            PGDATABASE: vaultwarden
            PGUSER: "{{ pg4bw_vaultwarden_user }}"
            PGPASSWORD: "{{ pg4bw_vaultwarden_password }}"
            PGHOST: /var/run/postgresql
            PGDATA: /var/lib/postgresql/data
            WALG_COMPRESSION_METHOD: brotli
            WALG_DELTA_MAX_STEPS: 6
            APPRISE_TARGET: ${APPRISE_TARGET}
            # RECOVERY_TARGET_ACTION: ${RECOVERY_TARGET_ACTION}
            # RECOVERY_TARGET_TIME: ${RECOVERY_TARGET_TIME}
            # RECOVERY_TARGET_TIMELINE: ${RECOVERY_TARGET_TIMELINE}
            # RECOVERY_WALG: ${RECOVERY_WALG}
            # WALG_RESTORE_NAME: ${WALG_RESTORE_NAME}
          container_name: "{{ pg4bw_container_name }}"
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -d vaultwarden"]
            # start_period: 300s
            interval: 20s
            timeout: 30s
            retries: 3
        bitwarden:
          image: "{{ bw_image }}"
          restart: always
          volumes:
            - "{{ bw_data }}:/data"
          ports:
            # host:port
            - "127.0.0.1:8080:80"
          environment:
            - YUBICO_CLIENT_ID={{ yubico_client_id }}
            - YUBICO_SECRET_KEY={{ yubico_secret_key }}
            # disable this for the first time
            - SIGNUPS_ALLOWED={{ signups_allowed }}
            - SMTP_HOST={{ smtp_host }}
            - SMTP_FROM={{ smtp_from }}
            - SMTP_PORT={{ smtp_port }}
            - SMTP_SECURITY={{ smtp_security }}
            - SMTP_USERNAME={{ smtp_username }}
            - SMTP_PASSWORD={{ smtp_password }}
            - DOMAIN={{ domain }}
            - DATABASE_URL=postgresql://{{ pg4bw_vaultwarden_user }}:{{ pg4bw_vaultwarden_password }}@{{ pg4bw_container_name }}:5432/vaultwarden
          container_name: "{{ bw_container_name }}"
          depends_on:
            bitwarden-db:
              condition: service_healthy
      networks:
        default:
          external:
            name: "{{ bw_network_name }}"
